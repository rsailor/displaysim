/*****************************************
DISPLAYSIM
by: Ryan Sailor

Desc: Displaysim is an LCD screen buffer simulator.
I use it for testing drawing algorithms that will
ideally be implemented in C.


******************************************/


int WIDTH = 128;
int HEIGHT = 160;
int SCALE = 2;

/**** PRIMITIVE FUNCTIONS *************/

// Draw a single pixel to the buffer
void qPoint(int x, int y, int r, int g, int b) {
  if(x >= 0 && y >= 0 && x < WIDTH && y < HEIGHT)
    buffer[WIDTH*y+x].update(r,g,b);
}

// Draw a line
void qLine(int x0, int y0, int x1, int y1, int r, int g, int b) {
  int dx = abs(x1-x0);
  int dy = abs(y1-y0);
  int sx, sy;
  if (x0 < x1) { sx = 1; } else { sx = -1; }
  if (y0 < y1) { sy = 1; } else { sy = -1; }
  int err = dx - dy;
   
  while(true) {
    qPoint(x0,y0,r,g,b);
    if(x0 == x1 && y0 == y1) { break; }
    int e2 = 2 * err;
    if (e2 > -dy) {
      err -= dy;
      x0 += sx;
    }
    if (x0 == x1 && y0 == y1) {
      qPoint(x0,y0,r,g,b);
      break;
    }
    if (e2 < dx) {
      err += dx;
      y0 += sy;
    }
  }
}

/* void qHLine */
/* void qVLine */

// Draw a triangle to the buffer
void qTriangle(int x0, int y0, int x1, int y1, int x2, int y2, int r, int g, int b) {
  qLine(x0,y0,x1,y1,r,g,b);
  qLine(x1,y1,x2,y2,r,g,b);
  qLine(x2,y2,x0,y0,r,g,b);
}

// Draw a solid triangle to the buffer  Note: Fill Triangle slightly smaller than non-filled on bottom (without temp fix)
void qTriangleSolid(int x0, int y0, int x1, int y1, int x2, int y2, int r, int g, int b) {
   // Find Top & Bot Y Coord
   int ymin = y0;
   if(y1 < ymin) ymin = y1;
   if(y2 < ymin) ymin = y2;
     
   int ymax = y0;
   if(y1 > ymax) ymax = y1;
   if(y2 > ymax) ymax = y2;
   
   // Find Left & Right X Coord
   int xmin = x0;
   if(x1 < xmin) xmin = x1;
   if(x2 < xmin) xmin = x2;
   
   int xmax = x0;
   if(x1 > xmax) xmax = x1;
   if(x2 > xmax) xmax = x2;
   
   // Scan Bounding Rectangle
   for(int y = ymin; y < ymax; y++) {
     for(int x = xmin; x < xmax; x++) {
       // Half-Space Function
       if( (x0-x1) * (y-y0) - (y0-y1) * (x-x0) >= 0
        && (x1-x2) * (y-y1) - (y1-y2) * (x-x1) >= 0
        && (x2-x0) * (y-y2) - (y2-y0) * (x-x2) >= 0)
         qPoint(x,y,r,g,b);
     }
   }
   
   // Temp Fix for size different
   qTriangle(x0,y0,x1,y1,x2,y2,r,g,b);
}

// Draw a rectangle to buffer
void qRect(int x0, int y0, int h, int w, int r, int g, int b) {
  qLine(x0,y0,x0+w,y0,r,g,b);
  qLine(x0,y0,x0,y0+h,r,g,b);
  qLine(x0+w,y0,x0+w,y0+h,r,g,b);
  qLine(x0,y0+h,x0+w,y0+h,r,g,b);
}

// Draw a filled rectangle to the buffer
void qRectSolid(int x0, int y0, int h, int w, int r, int g, int b) {
  for(int i = 0; i < h; i++) {
    qLine(x0,y0+i,x0+w,y0+i,r,g,b);
  }
}

/* void qRectRotate (note to self: possibly coord plane change via linalg) */

// Draw a circle to the buffer
void qCircle(int x0, int y0, int rad, int r, int g, int b) {
  int x = rad;
  int y = 0;
  int raderr = 1-x;
  
  while (x >= y) {
    qPoint(x + x0, y + y0, r,g,b);
    qPoint(y + x0, x + y0, r,g,b);
    qPoint(-x + x0, y + y0, r,g,b);
    qPoint(-y + x0, x + y0, r,g,b);
    qPoint(-x + x0, -y + y0, r,g,b);
    qPoint(-y + x0, -x + y0, r,g,b);
    qPoint(x + x0, -y + y0, r,g,b);
    qPoint(y + x0, -x + y0, r,g,b);
    
    y++;
    if(raderr<0) {
      raderr += 2*y+1;
    } else {
      x--;
      raderr += 2*(y-x+1);
    }
  }
}

// Draw a filled circle to the buffer
void qCircleSolid(int x0, int y0, int rad, int r, int g, int b) {
  int x = rad;
  int y = 0;
  int raderr = 1-x;
  int prevy = -1;
  
  while (x >= y) {
    if(y != prevy) {
      qLine(x + x0, y + y0, -x + x0, y + y0, r,g,b);
      qLine(y + x0, x + y0, -y + x0, x + y0, r,g,b);
      qLine(-x + x0, -y + y0, x + x0, -y + y0, r,g,b);
      qLine(-y + x0, -x + y0, y + x0, -x + y0, r,g,b);
      prevy = y;
    }
    y++;
    if(raderr<0) {
      raderr += 2*y+1;
    } else {
      x--;
      raderr += 2*(y-x+1);
    }
  }
}

// Draw an ellipse to the buffer
void qEllipse(int x0, int y0, int radx, int rady, int r, int g, int b) {
  int radx2 = radx * radx;
  int rady2 = rady * rady;
  int frx2 = 4 * radx2, fry2 = 4 * rady2;
  int x, y, sigma;
  
  for (x = 0, y = rady, sigma = 2*rady2+radx2*(1-2*rady); rady2*x <= radx2*y; x++) {
    qPoint(x + x0, y + y0, r,g,b);
    qPoint(-x + x0, y + y0, r,g,b);
    qPoint(x + x0, -y + y0, r,g,b);
    qPoint(-x + x0, -y + y0, r,g,b);
    if (sigma >= 0) {
      sigma += frx2 * (1-y);
      y--;
    }
    sigma += rady2 * ((4*x) + 6);
  }
  
  
  for (x = radx, y = 0, sigma = 2*radx2+rady2*(1-2*radx);  radx2*y <= rady2*x; y++) {
    qPoint(x + x0, y + y0, r,g,b);
    qPoint(-x + x0, y + y0, r,g,b);
    qPoint(x + x0, -y + y0, r,g,b);
    qPoint(-x + x0, -y + y0, r,g,b);
    if (sigma >= 0) {
      sigma += fry2 * (1-x);
      x--;
    }
    sigma += radx2 * ((4 * y) + 6);
  }
  
}

// Draw a solid ellipse to the buffer
void qEllipseSolid(int x0, int y0, int radx, int rady, int r, int g, int b) {
  int radx2 = radx * radx;
  int rady2 = rady * rady;
  int frx2 = 4 * radx2, fry2 = 4 * rady2;
  int x, y, sigma;
  
  for (x = 0, y = rady, sigma = 2*rady2+radx2*(1-2*rady); rady2*x <= radx2*y; x++) {
    qLine(x + x0, y + y0,-x + x0, y + y0,  r,g,b);
    qLine(x + x0, -y + y0,-x + x0, -y + y0, r,g,b);
    if (sigma >= 0) {
      sigma += frx2 * (1-y);
      y--;
    }
    sigma += rady2 * ((4*x) + 6);
  }
  
  
  for (x = radx, y = 0, sigma = 2*radx2+rady2*(1-2*radx);  radx2*y <= rady2*x; y++) {
    qLine(x + x0, y + y0,-x + x0, y + y0, r,g,b);
    qLine(x + x0, -y + y0, -x + x0, -y + y0,r,g,b);
    if (sigma >= 0) {
      sigma += fry2 * (1-x);
      x--;
    }
    sigma += radx2 * ((4 * y) + 6);
  }
  
}

// Fill the buffer with a single color
void qBGFill(int r, int g, int b) {
  for(int i = 0; i < WIDTH*HEIGHT; i++) {
    int x = (i % WIDTH) * SCALE;
    int y = (i / WIDTH) * SCALE;
    
    buffer[i].update(r,g,b);
  } 
}

/* Font Render */
// Include one custom 12px font 
int[] qfont_consolas_12 = {  // will be byte* in C or even better, a struct
5, // index of first letter
11, // bytes per letter
7, // horizontal spacing
7, // char width
12, // char height
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x81,0x02,0x04,0x00,0x18,0x30,0x00,0x00,0x00,0x00,0xA1,0x42,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA1,0x4F,0xC5,0x14,0x7E,0x50,0xA0,0x00,0x00,0x00,0x20,0xE2,0x85,0x06,0x06,0x0A,0x24,0xF0,0x80,0x00,0x00,0x03,0x8D,0x2A,0x9E,0x07,0x1A,0x55,0x38,0x00,0x00,0x00,0x00,0xE2,0x44,0x86,0x15,0x4E,0x8C,0xFC,0x00,0x00,0x00,0x00,0x40,0x81,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x40,0x82,0x04,0x08,0x10,0x20,0x20,0x40,0x40,0x00,0x40,0x40,0x80,0x81,0x02,0x04,0x08,0x20,0x41,0x00,0x00,0x00,0x42,0xA3,0x8F,0x84,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x1F,0x08,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x60,0xC3,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x60,0x00,0x00,0x00,0x00,0x10,0x40,0x82,0x04,0x08,0x20,0x41,0x00,0x00,0x00,0x00,0xF1,0x34,0x69,0x54,0xB1,0x64,0x78,0x00,0x00,0x00,0x00,0xC2,0x81,0x02,0x04,0x08,0x10,0xF8,0x00,0x00,0x00,0x00,0xE2,0x20,0x40,0x82,0x08,0x20,0xF8,0x00,0x00,0x00,0x01,0xE0,0x20,0x47,0x01,0x02,0x04,0xF0,0x00,0x00,0x00,0x00,0x60,0xC2,0x89,0x22,0x7E,0x08,0x10,0x00,0x00,0x00,0x01,0xF2,0x04,0x0F,0x01,0x02,0x0C,0xF0,0x00,0x00,0x00,0x00,0x61,0x04,0x0F,0x11,0x22,0x44,0x70,0x00,0x00,0x00,0x01,0xF0,0x20,0x81,0x04,0x08,0x30,0x40,0x00,0x00,0x00,0x00,0xE2,0x26,0x47,0x1B,0x22,0x44,0x70,0x00,0x00,0x00,0x00,0xE2,0x24,0x48,0x8F,0x02,0x08,0xE0,0x00,0x00,0x00,0x00,0x00,0x03,0x06,0x00,0x00,0x30,0x60,0x00,0x00,0x00,0x00,0x00,0x03,0x06,0x00,0x00,0x30,0x60,0xC3,0x00,0x00,0x00,0x00,0x21,0x84,0x10,0x10,0x18,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x80,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x03,0x01,0x01,0x04,0x30,0x80,0x00,0x00,0x00,0x00,0xC0,0x60,0x40,0x8E,0x00,0x30,0x60,0x00,0x00,0x00,0x00,0xF3,0x34,0x33,0x6A,0xD5,0xBD,0x01,0x03,0xC0,0x00,0x00,0x41,0x42,0x85,0x11,0x3E,0x44,0x88,0x00,0x00,0x00,0x01,0xE2,0x24,0x4F,0x11,0x22,0x44,0xF0,0x00,0x00,0x00,0x00,0x71,0x04,0x08,0x10,0x20,0x60,0x78,0x00,0x00,0x00,0x01,0xE2,0x64,0x48,0x91,0x22,0x48,0xE0,0x00,0x00,0x00,0x01,0xE2,0x04,0x0F,0x10,0x20,0x40,0xF0,0x00,0x00,0x00,0x01,0xE2,0x04,0x0F,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x00,0xF2,0x08,0x13,0xA1,0x42,0x44,0x78,0x00,0x00,0x00,0x01,0x12,0x24,0x4F,0x91,0x22,0x44,0x88,0x00,0x00,0x00,0x01,0xF0,0x81,0x02,0x04,0x08,0x10,0xF8,0x00,0x00,0x00,0x01,0xE0,0x40,0x81,0x02,0x04,0x08,0xE0,0x00,0x00,0x00,0x01,0x12,0x45,0x0C,0x18,0x28,0x48,0x88,0x00,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0xF0,0x00,0x00,0x00,0x01,0x12,0x26,0xCD,0x95,0x22,0x44,0x8C,0x00,0x00,0x00,0x01,0x93,0x26,0x4A,0x95,0x26,0x4C,0x98,0x00,0x00,0x00,0x01,0xE2,0x68,0x50,0xA1,0x42,0xC8,0xF0,0x00,0x00,0x00,0x01,0xE2,0x24,0x48,0x9E,0x20,0x40,0x80,0x00,0x00,0x00,0x01,0xE2,0x68,0x50,0xA1,0x42,0xC8,0xF0,0x80,0xE0,0x00,0x01,0xE2,0x24,0x48,0x9E,0x26,0x44,0x8C,0x00,0x00,0x00,0x00,0xE2,0x04,0x06,0x02,0x02,0x04,0xF0,0x00,0x00,0x00,0x01,0xF0,0x81,0x02,0x04,0x08,0x10,0x20,0x00,0x00,0x00,0x01,0x12,0x24,0x48,0x91,0x22,0x44,0x70,0x00,0x00,0x00,0x01,0x12,0x24,0x4D,0x0A,0x14,0x28,0x20,0x00,0x00,0x00,0x01,0x12,0x24,0x4A,0x9B,0x36,0x6C,0x88,0x00,0x00,0x00,0x03,0x32,0x43,0x86,0x0C,0x34,0x45,0x8C,0x00,0x00,0x00,0x02,0x0A,0x26,0xC5,0x04,0x08,0x10,0x20,0x00,0x00,0x00,0x01,0xF0,0x40,0x82,0x04,0x10,0x20,0xF8,0x00,0x00,0x00,0x00,0xE1,0x02,0x04,0x08,0x10,0x20,0x40,0x81,0xC0,0x00,0x01,0x01,0x02,0x02,0x04,0x08,0x08,0x10,0x10,0x00,0x00,0x00,0xE0,0x40,0x81,0x02,0x04,0x08,0x10,0x21,0xC0,0x00,0x00,0x41,0x44,0x48,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xF0,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x8F,0x22,0x4C,0x78,0x00,0x00,0x00,0x01,0x02,0x07,0x8C,0x91,0x22,0x44,0xF0,0x00,0x00,0x00,0x00,0x00,0x03,0xCC,0x10,0x20,0x60,0x78,0x00,0x00,0x00,0x00,0x10,0x23,0xC8,0x91,0x22,0x4C,0x68,0x00,0x00,0x00,0x00,0x00,0x03,0x88,0x9F,0x20,0x60,0x78,0x00,0x00,0x00,0x00,0x79,0x02,0x1F,0x88,0x10,0x20,0x40,0x00,0x00,0x00,0x00,0x00,0x03,0xE8,0x91,0x3C,0x40,0xF9,0x13,0xC0,0x00,0x01,0x02,0x05,0x8C,0x91,0x22,0x44,0x88,0x00,0x00,0x00,0x30,0x60,0x07,0x02,0x04,0x08,0x10,0xF8,0x00,0x00,0x00,0x30,0x60,0x07,0x81,0x02,0x04,0x08,0x10,0x23,0x80,0x00,0x01,0x02,0x04,0x8A,0x18,0x28,0x48,0x88,0x00,0x00,0x00,0x01,0xC0,0x81,0x02,0x04,0x08,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x07,0xCA,0x95,0x2A,0x54,0xA8,0x00,0x00,0x00,0x00,0x00,0x07,0x8C,0x91,0x22,0x44,0x88,0x00,0x00,0x00,0x00,0x00,0x03,0x88,0x91,0x22,0x44,0x70,0x00,0x00,0x00,0x00,0x00,0x07,0x8C,0x91,0x22,0x44,0xF1,0x02,0x00,0x00,0x00,0x00,0x03,0xC8,0x91,0x22,0x4C,0x68,0x10,0x20,0x00,0x00,0x00,0x05,0xCC,0x90,0x20,0x40,0x80,0x00,0x00,0x00,0x00,0x00,0x03,0x88,0x18,0x0C,0x08,0xE0,0x00,0x00,0x00,0x00,0x81,0x0F,0x84,0x08,0x10,0x20,0x70,0x00,0x00,0x00,0x00,0x00,0x04,0x48,0x91,0x22,0x4C,0x78,0x00,0x00,0x00,0x00,0x00,0x04,0x48,0x91,0x14,0x28,0x20,0x00,0x00,0x00,0x00,0x00,0x04,0x4A,0x95,0x2E,0x6C,0x48,0x00,0x00,0x00,0x00,0x00,0x06,0xC5,0x04,0x14,0x45,0x8C,0x00,0x00,0x00,0x00,0x00,0x04,0x48,0x8A,0x14,0x30,0x20,0x87,0x00,0x00,0x00,0x00,0x07,0xC1,0x04,0x08,0x20,0xF8,0x00,0x00,0x00,0x00,0x30,0x81,0x02,0x18,0x08,0x10,0x20,0x40,0x60,0x10,0x20,0x40,0x81,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x00,0x01,0x80,0x81,0x02,0x03,0x08,0x10,0x20,0x43,0x00,0x00,0x00,0x00,0x00,0x00,0x39,0x4E,0x00,0x00,0x00,0x00
};

int[] qfont_consolas_16 = {
    5,
    20,
    10,
    10,
    16,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x10,0x04,0x01,0x00,0x40,0x10,0x04,0x01,0x00,0x00,0x18,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD8,0x36,0x0D,0x83,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x08,0x82,0x23,0xFC,0x22,0x11,0x0F,0xF1,0x10,0x44,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x20,0x3C,0x16,0x05,0x81,0x40,0x30,0x07,0x01,0x20,0x48,0x16,0x1F,0x01,0x00,0x40,0x00,0x00,0x00,0x01,0x84,0x92,0x25,0x89,0x41,0xA0,0x18,0x05,0x83,0x90,0xA4,0x49,0x31,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x44,0x11,0x04,0x41,0xA0,0x30,0x1E,0x88,0xA2,0x38,0xC6,0x1E,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x0C,0x03,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x10,0x0C,0x02,0x01,0x80,0x40,0x10,0x04,0x01,0x00,0x40,0x18,0x02,0x00,0xC0,0x10,0x00,0x00,0x02,0x00,0x40,0x18,0x02,0x00,0xC0,0x10,0x04,0x01,0x00,0x40,0x10,0x0C,0x02,0x01,0x80,0x40,0x00,0x00,0x00,0x00,0x20,0x49,0x0F,0x80,0x80,0xF8,0x49,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x20,0x08,0x1F,0xC0,0x80,0x20,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x07,0x00,0xC0,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x06,0x01,0x00,0x40,0x30,0x08,0x06,0x01,0x00,0x40,0x30,0x08,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x08,0x84,0x11,0x0C,0x4D,0x16,0x46,0x11,0x04,0x22,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x0A,0x04,0x80,0x20,0x08,0x02,0x00,0x80,0x20,0x08,0x1F,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x11,0x80,0x20,0x08,0x02,0x01,0x00,0x80,0x40,0x20,0x1F,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x00,0x80,0x20,0x18,0x3C,0x01,0x80,0x20,0x08,0x04,0x1E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x07,0x01,0x40,0xD0,0x24,0x11,0x0C,0x43,0xFC,0x04,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x10,0x04,0x01,0x00,0x7C,0x01,0x80,0x20,0x08,0x04,0x1E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x0C,0x02,0x01,0x00,0x5E,0x18,0xC4,0x11,0x04,0x23,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0xC0,0x20,0x18,0x04,0x03,0x00,0x80,0x60,0x10,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x10,0x84,0x21,0x98,0x18,0x09,0x04,0x21,0x08,0x62,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x08,0x84,0x11,0x04,0x63,0x0F,0x40,0x10,0x08,0x06,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x18,0x00,0x00,0x00,0x00,0x18,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x18,0x00,0x00,0x00,0x00,0x1C,0x07,0x00,0xC0,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0x60,0x30,0x18,0x03,0x00,0x60,0x0C,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0x00,0x01,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x01,0x80,0x30,0x06,0x00,0xC0,0x60,0x30,0x18,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x08,0x01,0x00,0x40,0x10,0x38,0x08,0x02,0x00,0x00,0x30,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x31,0x18,0x24,0x09,0x7A,0x92,0xA8,0xAA,0x2A,0x9A,0x9F,0x20,0x0C,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x05,0x01,0x40,0x58,0x22,0x08,0x82,0x21,0xFC,0x41,0x10,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x10,0x84,0x21,0x18,0x7C,0x11,0x84,0x21,0x08,0x46,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x0C,0x42,0x01,0x00,0x40,0x10,0x04,0x01,0x80,0x21,0x07,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x10,0x84,0x11,0x04,0x41,0x10,0x44,0x11,0x0C,0x46,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x08,0x02,0x00,0x80,0x3F,0x08,0x02,0x00,0x80,0x20,0x0F,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x08,0x02,0x00,0x80,0x20,0x0F,0xC2,0x00,0x80,0x20,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x0C,0x42,0x01,0x00,0x40,0x11,0xC4,0x11,0x84,0x31,0x07,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x10,0x44,0x11,0x04,0x7F,0x10,0x44,0x11,0x04,0x41,0x10,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x02,0x00,0x80,0x20,0x08,0x02,0x00,0x80,0x20,0x08,0x0F,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x01,0x00,0x40,0x10,0x04,0x01,0x00,0x40,0x10,0x44,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x11,0x04,0xC1,0x60,0x70,0x1C,0x05,0x81,0x30,0x44,0x10,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x08,0x02,0x00,0x80,0x20,0x08,0x02,0x00,0x80,0x20,0x0F,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC1,0xB8,0xEE,0x3B,0xD6,0xD5,0xB5,0x6C,0x9B,0x06,0xC1,0xB0,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x61,0x18,0x45,0x11,0x44,0x49,0x12,0x44,0x51,0x14,0x43,0x10,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x10,0x8C,0x12,0x04,0x81,0x20,0x48,0x12,0x0C,0x42,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x11,0x84,0x21,0x08,0x46,0x1E,0x04,0x01,0x00,0x40,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x11,0x08,0x22,0x08,0x82,0x20,0x88,0x22,0x08,0x44,0x0E,0x01,0x00,0x48,0x00,0x00,0x00,0x00,0x00,0x7C,0x10,0x84,0x21,0x18,0x78,0x12,0x04,0x41,0x10,0x42,0x10,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x10,0x04,0x01,0x00,0x38,0x03,0x00,0x20,0x08,0x02,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x02,0x00,0x80,0x20,0x08,0x02,0x00,0x80,0x20,0x08,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x10,0x44,0x11,0x04,0x41,0x10,0x44,0x11,0x04,0x62,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x10,0x46,0x30,0x88,0x22,0x0D,0x83,0x40,0x50,0x14,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x81,0x20,0x48,0x12,0x24,0x99,0x25,0x4B,0x52,0x94,0xE3,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC3,0x19,0x83,0x40,0xF0,0x18,0x07,0x03,0x40,0x98,0x63,0x30,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x90,0x42,0x20,0xD8,0x14,0x02,0x00,0x80,0x20,0x08,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0x80,0x60,0x10,0x08,0x02,0x01,0x00,0xC0,0x20,0x1F,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x10,0x04,0x01,0x00,0x40,0x10,0x04,0x01,0x00,0x40,0x10,0x04,0x01,0x00,0x40,0x00,0x00,0x00,0x01,0x00,0x20,0x08,0x03,0x00,0x40,0x10,0x06,0x00,0x80,0x30,0x04,0x01,0x00,0x60,0x08,0x00,0x00,0x00,0x00,0xF0,0x04,0x01,0x00,0x40,0x10,0x04,0x01,0x00,0x40,0x10,0x04,0x01,0x00,0x40,0x10,0x00,0x00,0x00,0x00,0x00,0x0C,0x05,0x01,0x20,0x8C,0x21,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x22,0x00,0x83,0xE1,0x08,0x46,0x0E,0x80,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x40,0x10,0x04,0x01,0x70,0x66,0x10,0x84,0x21,0x08,0x44,0x1E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x20,0x10,0x04,0x01,0x00,0x60,0x07,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x02,0x00,0x80,0x20,0x78,0x22,0x10,0x84,0x21,0x08,0x66,0x0E,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x23,0x10,0x47,0xF1,0x00,0x20,0x07,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x10,0x04,0x01,0x01,0xF8,0x10,0x04,0x01,0x00,0x40,0x10,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x42,0x10,0x84,0x21,0xF0,0x40,0x1F,0x84,0x11,0x04,0x00,0x00,0x00,0x01,0x00,0x40,0x10,0x04,0x01,0x70,0x62,0x10,0x84,0x21,0x08,0x42,0x10,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x30,0x00,0x00,0x01,0xC0,0x10,0x04,0x01,0x00,0x40,0x10,0x1F,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x0C,0x00,0x00,0x01,0xF0,0x04,0x01,0x00,0x40,0x10,0x04,0x01,0x00,0x41,0x30,0x00,0x00,0x00,0x01,0x00,0x40,0x10,0x04,0x01,0x18,0x48,0x1C,0x05,0x01,0x20,0x44,0x10,0x80,0x00,0x00,0x00,0x00,0x00,0x01,0xC0,0x10,0x04,0x01,0x00,0x40,0x10,0x04,0x01,0x00,0x40,0x10,0x1F,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFC,0x6D,0x12,0x44,0x91,0x24,0x49,0x12,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x70,0x62,0x10,0x84,0x21,0x08,0x42,0x10,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x23,0x10,0x44,0x11,0x04,0x62,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x78,0x63,0x10,0x44,0x11,0x04,0x42,0x1F,0x04,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x22,0x10,0x84,0x21,0x08,0x66,0x0E,0x80,0x20,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xB8,0x31,0x08,0x42,0x00,0x80,0x20,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x40,0x18,0x03,0xC0,0x08,0x02,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x04,0x01,0x01,0xFC,0x10,0x04,0x01,0x00,0x40,0x18,0x03,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x08,0x42,0x10,0x84,0x21,0x08,0x46,0x0E,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x04,0x63,0x08,0x82,0x20,0x50,0x14,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x04,0x41,0x12,0x45,0x51,0x54,0x55,0x18,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x8C,0x36,0x07,0x00,0xC0,0x58,0x33,0x18,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x04,0x63,0x08,0x82,0x60,0x50,0x14,0x06,0x01,0x80,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xF8,0x04,0x02,0x01,0x80,0x40,0x20,0x1F,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x18,0x04,0x01,0x00,0x40,0x10,0x18,0x01,0x00,0x40,0x10,0x04,0x01,0x00,0x60,0x00,0x02,0x00,0x80,0x20,0x08,0x02,0x00,0x80,0x20,0x08,0x02,0x00,0x80,0x20,0x08,0x02,0x00,0x80,0x20,0x00,0x00,0x00,0x01,0xC0,0x18,0x02,0x00,0x80,0x20,0x08,0x01,0x80,0x80,0x20,0x08,0x02,0x00,0x80,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x93,0x24,0x70,0x00,0x00,0x00,0x00,0x00,0x00
};

// Internal function that unpacks a byte from the font bitmap
int[] _qExtractFont(int[] font, int index) {
  int b = font[index];
  int[] r = new int[8];
  for(int i = 0; i < 8; i++) {
    r[i] = b & 0x01;
    b = b >> 1;
  }
  return r;
}

// Internal function for drawing a character
void _qDrawChar(int x, int y, int[] charData, int charIndex, int size, int charWidth, int charHeight, int r, int g, int b) {
  
  int[] abyte = new int[8];
  int wCount = 0; // track width of character, go to next row when this reaches charWidth
  int maxY = y + charHeight - 1;
  
  // Traverse the character bytes within the font data
  for(int i = charIndex; i < charIndex+size; i++) {
      abyte = _qExtractFont(charData,i);
      
      // For each bit in the packed byte
      for(int j = 7; j >= 0; j--) {
          // If bit is 1, add a point at this coordinate
          if(abyte[j] == 1)
            qPoint(x,y,r,g,b);
          // increment width counter
          wCount++;
          x++;
          // if wCount is equal to charWidth (therefore,
          // greater than zero-indexed charWidth), increment
          // y and subtract charWidth
          if(wCount == charWidth) {
              y++;
              x -= charWidth;
              wCount = 0;
          }
          
          // If y reaches the total pixels
          // in the character, stop this function.
          if(y > maxY) {
              break;
          }
      }
  }
}

// Draws text to the buffer using the included font
void qText(int x, int y, char[] text, int len, int[] fontface, int r, int g, int b) {
    // get first letter start
    int start = fontface[0];
    // get bytes per letter
    int bpl = fontface[1];
    // get char spacing
    int spacing = fontface[2];
    // get char width
    int cw = fontface[3];
    // get char height
    int ch = fontface[4];
    // char counter (for newline)
    int charcounter = 0;
    
    for(int i = 0; i<len; i++) {
        // special case characters
        if (text[i] == '\n') { // newline
            y += (ch);
            x -= spacing * charcounter;
            charcounter = 0;
        } else if (text[i] == '\0') { // null char
            break;
        } else {
            int tval = (int)text[i]-32;
            int ci = start + tval*bpl;
            _qDrawChar(x,y,fontface,ci,bpl,cw,ch,r,g,b);
            x += spacing;
            charcounter++;
        }
    }
}

// Draw Text Within a box boundary
// Will not work with '\n' (newline) characters in string
void qTextBox(int x, int y, int w, int h, char[] text, int len, int[] fontface, int r, int g, int b) {
    // get char width
    int cw = fontface[3];
    // get char height
    int ch = fontface[4];
    
    // calculate number of chars per line
    int charLine = w/cw;
    
    // calculate number of lines
    int numLines = h/ch;
    
    // draw each line
    for(int line = 0; line < numLines && line*charLine < len; line++) {
        // get line
        // In C, replaced by memcpy(a2, &a[1], n*sizeof(*a));
        // Will also find length
        int lenB = len-line*charLine;
        int useLen = charLine;
        if(lenB < charLine)
            useLen = lenB;
        char[] singleLine = subset(text,(line*charLine),useLen);
        qText(x, y, singleLine, singleLine.length, fontface, r, g, b);
        y += ch;
    }
}
    

/* Image Render */

// To be implemented
void qImage(int x, int y, int[] img_data) {
  
}

// Draws the buffer contents to the screen
void qRefresh() {
  for(int i = 0; i < WIDTH*HEIGHT; i++) {
    int x = (i % WIDTH) * SCALE;
    int y = (i / WIDTH) * SCALE;
    
    buffer[i].display(x,y,SCALE,SCALE);
  } 
}

// Clear the buffer to all black
void qClear() {
  for(int i = 0; i < WIDTH*HEIGHT; i++) {
    int x = (i % WIDTH) * SCALE;
    int y = (i / WIDTH) * SCALE;
    
    buffer[i].update(0,0,0);
  } 
}

/**** MAIN STUFF ************************************************************/


Pixel[] buffer;


void setup() {
  // Open Screen
  size(WIDTH*SCALE,HEIGHT*SCALE);
  
  // Options
  noStroke();
  
  // Create Buffer
  buffer = new Pixel[HEIGHT*WIDTH];
  for(int i = 0; i < WIDTH*HEIGHT; i++) {
    buffer[i] = new Pixel();
  }
  
  // Run Commands
  qTriangle(70,20,20,70,50,50,0,255,0);
  char[] msg = {'W','h','i','l','e'};
  qText(20, 120, msg, 5, qfont_consolas_16, 255, 0, 0);
  //qTextBox(20, 120, 14, 30, msg, 5, qfont_consolas_12, 255, 0, 0);
  qRefresh();
}

void draw() {
  
}

class Pixel {
  int[] rgb;
  
  Pixel() {
    rgb = new int[3];
  }
  
  void update(int r, int g, int b) {
    rgb[0] = r;
    rgb[1] = g;
    rgb[2] = b;
  }
  
  void display(int x, int y, int w, int h) {
    fill(rgb[0], rgb[1], rgb[2]);
    rect(x,y,w,h);
  }
}
